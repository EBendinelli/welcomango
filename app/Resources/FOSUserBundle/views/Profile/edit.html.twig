{% extends "FOSUserBundle:Profile:show.html.twig" %}

{% form_theme form with ["::frontTheme.html.twig"] %}

{#{% form_theme form with ["::frontTheme.html.twig"] %}#}

{% block meta_title %}{{ "profile.editProfile"|trans({}, "interface") }}{% endblock %}

{% trans_default_domain "interface" %}

{% block profile_content %}
    {{ form_errors(form) }}

    {#<h2>{{ 'profile.editYourInformations'|trans }}</h2>
    <div id="profile-edit-information" class="m-t-20">
        <div class="row">
            <div class="col-md-12 bg-master-lighter">
                {{ form_start(form, {'action': path('fos_user_profile_edit')}) }}
                <h4>{{ 'profile.edit.aboutYou'|trans }}</h4>
                <hr>
                <div class="row">
                    <div class="col-md-12">{{ form_row(form.username) }}</div>
                </div>
                <div class="row">
                    <div class="col-md-6">{{ form_row(form.firstName) }}</div>
                    <div class="col-md-6">{{ form_row(form.lastName) }}</div>
                </div>
                <div class="row">
                    <div class="col-md-6">{{ form_row(form.phone) }}</div>
                    <div class="col-md-4">{{ form_row(form.birthdate) }}</div>
                    <div class="col-md-2">{{ form_row(form.gender) }}</div>

                </div>
                <h4>{{ 'profile.edit.currentSituation'|trans }}</h4>
                <hr>
                <div class="row">
                    <div class="col-md-6">{{ form_row(form.from_city) }}</div>
                    <div class="col-md-6">{{ form_row(form.current_city) }}</div>
                </div>
                <div class="row">
                    <div class="col-md-12">{{ form_row(form.description) }}</div>
                </div>
                <div class="row">
                    <div class="col-md-12">{{ form_row(form.occupation) }}</div>
                </div>
                <div class="row text-right m-b-20">
                    <a href="{{ path('fos_user_profile_show') }}" class="btn btn-default">{{ 'interface.cancel'|trans({}, "interface") }}</a>
                    <button type="submit" class="btn btn-complete">
                     <i class="fa fa-save"></i>{{ 'interface.save'|trans({}, "interface") }}
                    </button>
                </div>
                {{ form_end(form) }}
            </div>
        </div>
    </div>#}

    <div class=" p-l-10 p-b-10 p-t-10 m-t-20 b-a b-grey profile-form-note m-t-10 bg-master-light">
        This section defines what the other traveler will see from you. <br/>
        Make sure to tell them how you see yourself as a travel as well as a local when you're not on a trip!
    </div>



    <div id="myFormWizard" class="m-t-20">
        <!-- Nav tabs -->
        <ul class="nav nav-tabs nav-tabs-linetriangle nav-tabs-separator">
            <li class="{% if activeTab == 'current' %}active{% endif %}">
                <a data-toggle="tab" href="#tab1"><i class="fa pg-map tab-icon"></i> <span>Current situation</span></a>
            </li>
            <li class="">
                <a data-toggle="tab" href="#tab2"><i class="fa fa-language tab-icon"></i> <span>Languages</span></a>
            </li>
            <li class=" {% if activeTab == 'about' %}active{% endif %}">
                <a data-toggle="tab" href="#tab3"><i class="fa fa-user tab-icon"></i> <span>About you</span></a>
            </li>
        </ul>
        <!-- Tab panes -->
        {{ form_start(form, {'action': path('fos_user_profile_edit')}) }}
        <div class="tab-content bg-white p-l-20 p-r-20 p-t-20 p-b-20 ">
            <div class="tab-pane {% if activeTab == 'current' %}active{% endif %} slide" id="tab1">
                <div class="row">
                    <div class="profile-form-note m-t-10">{{ "profile.edit.currentCityNote"|trans }}</div>
                    <div>{{ form_row(form.currentCityInput, {'attr': {'onFocus':'geolocate()'}}) }}</div>
                    <div class=" profile-form-note m-t-20">{{ "profile.edit.descriptionNote"|trans }}</div>
                    <div>{{ form_row(form.description) }}</div>
                    <div class="profile-form-note m-t-20">{{ "profile.edit.occupationNote"|trans }}</div>
                    <div>{{ form_row(form.occupation) }}</div>
                </div>
            </div>
            <div class="tab-pane slide" id="tab2">
                ...
            </div>
            <div class="tab-pane slide {% if activeTab == 'about' %}active{% endif %}" id="tab3">
                <div class="profile-form-note">{{ "profile.edit.usernameNote"|trans }}</div>
                <div>{{ form_row(form.username) }}</div>
                <div class="row m-t-20">
                    <div class="col-md-6">{{ form_row(form.firstName) }}</div>
                    <div class="col-md-6">{{ form_row(form.lastName) }}</div>
                </div>
                <div>
                    <div class="profile-form-note m-t-20">{{ "profile.edit.profilePictureNote"|trans }}</div>
                    {{ form_row(form.media_photo) }}
                    <div class="col-md-12" id="profile-media-croped">
                        {% if user.profileMedia %}
                            <img src="{{ user.profileMedia.getPath ~ user.profileMedia.getOriginalFilename }}"/>
                        {% endif%}
                    </div>
                </div>
                <div class="profile-form-note m-t-20">{{ "profile.edit.phoneNote"|trans }}</div>
                <div class="row">
                    <div class="col-md-6">{{ form_row(form.phone) }}</div>
                    <div class="col-md-6">{{ form_row(form.gender) }}</div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="profile-form-note m-t-20">{{ "profile.edit.birthdayNote"|trans }}</div>
                        <div class="m-t-20">{{ form_row(form.birthdate) }}</div>
                    </div>
                </div>
                <hr/>
                <div>
                    <a data-toggle='modal' data-target='.modal-change-password'  data-text='Change password'>Change password</a>
                </div>
            </div>

            <div class="text-right m-t-20">
                <a href="{{ path('fos_user_profile_show') }}" class="btn btn-default">{{ 'interface.cancel'|trans({}, "interface") }}</a>
                <button type="submit" class="btn btn-complete">
                    <i class="fa fa-save"></i>{{ 'interface.save'|trans({}, "interface") }}
                </button>
            </div>
            {{ form_end(form) }}
        </div>
    </div>

    {% include "WelcomangoMediaBundle:Media:modal.html.twig" %}
    {% include "WelcomangoUserBundle:User:changePasswordModal.html.twig" with {'form': passwordForm } %}

{% endblock profile_content %}

{% block javascripts %}
    {{ parent() }}
    {{ form_javascript(form) }}
    {% include "WelcomangoMediaBundle:Media:_baseJs.html.twig" with {
        'file_input_id' : 'front_user_edit_media_photo',
        'in_modal' : true,
        'id_crop_button' : "modal-save-crop-button",
        'id_croped_media' : 'profile-media-croped'
    } %}
{#
    {{ include('WelcomangoMediaBundle:AdminMedia:_baseJs.html.twig', {'hiddenInput' : 'front_user_edit_medias_upload'}) }}
#}

    <script type="text/javascript">

        var placeSearch, autocompleteCurrent;

        function initAutocomplete() {
            // Create the autocomplete object, restricting the search to geographical
            // location types.

            var input = document.getElementById('front_user_edit_currentCityInput');
            autocompleteCurrent = new google.maps.places.Autocomplete(input , {types: ['(cities)'], region:'EU'});


            autocompleteCurrent.addListener('place_changed', function(){
                var placeCurrent = autocompleteCurrent.getPlace();

                if(placeCurrent){
                    var currentCity = document.getElementById('front_user_edit_currentCity');
                    var currentCityLat = document.getElementById('front_user_edit_currentCityLat');
                    var currentCityLng = document.getElementById('front_user_edit_currentCityLng');
                    var currentCityState = document.getElementById('front_user_edit_currentCityState');
                    var currentCityCountry = document.getElementById('front_user_edit_currentCityCountry');
                    var currentCityCountryCode = document.getElementById('front_user_edit_currentCityCountryCode');

                    for (var i = 0; i < placeCurrent.address_components.length; i++) {
                        var addressType = placeCurrent.address_components[i].types[0];
                        if (addressType == 'country') {
                            currentCityCountry.value = placeCurrent.address_components[i]['long_name'];
                            currentCityCountryCode.value = placeCurrent.address_components[i]['short_name'];
                        }else if(addressType == 'administrative_area_level_1') {
                            currentCityState.value = placeCurrent.address_components[i]['long_name'];
                        }else if(addressType == 'locality') {
                            currentCity.value = placeCurrent.address_components[i]['long_name'];
                        }
                    }
                    currentCityLat.value = placeCurrent.geometry.location.lat();
                    currentCityLng.value = placeCurrent.geometry.location.lng();
                }
            });
        }

        // Bias the autocomplete object to the user's geographical location,
        // as supplied by the browser's 'navigator.geolocation' object.
        function geolocate() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function(position) {
                    var geolocation = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                });
            }
        }

    </script>

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAt6eHUKQPmViopocNUR0iShUiKK72dj7g&&signed_in=true&libraries=places&callback=initAutocomplete" async defer></script>

    <script>
        $(document).ready(function() {
            $('#myFormWizard').bootstrapWizard({
                onTabShow: function(tab, navigation, index) {
                    var $total = navigation.find('li').length;
                    var $current = index + 1;

                    // If it's the last tab then hide the last button and show the finish instead
                    if ($current >= $total) {
                        $('#myFormWizard').find('.pager .next').hide();
                        $('#myFormWizard').find('.pager .finish').show();
                        $('#myFormWizard').find('.pager .finish').removeClass('disabled');
                    } else {
                        $('#myFormWizard').find('.pager .next').show();
                        $('#myFormWizard').find('.pager .finish').hide();
                    }

                    var li = navigation.find('li.active');

                    var btnNext = $('#myFormWizard').find('.pager .next').find('button');
                    var btnPrev = $('#myFormWizard').find('.pager .previous').find('button');

                    // remove fontAwesome icon classes
                    function removeIcons(btn) {
                        btn.removeClass(function(index, css) {
                            return (css.match(/(^|\s)fa-\S+/g) || []).join(' ');
                        });
                    }

                    if ($current > 1 && $current < $total) {

                        var nextIcon = li.next().find('.fa');
                        var nextIconClass = nextIcon.attr('class').match(/fa-[\w-]*/).join();

                        removeIcons(btnNext);
                        btnNext.addClass(nextIconClass + ' btn-animated from-left fa');

                        var prevIcon = li.prev().find('.fa');
                        var prevIconClass = prevIcon.attr('class').match(/fa-[\w-]*/).join();

                        removeIcons(btnPrev);
                        btnPrev.addClass(prevIconClass + ' btn-animated from-left fa');
                    } else if ($current == 1) {
                        // remove classes needed for button animations from previous button
                        btnPrev.removeClass('btn-animated from-left fa');
                        removeIcons(btnPrev);
                    } else {
                        // remove classes needed for button animations from next button
                        btnNext.removeClass('btn-animated from-left fa');
                        removeIcons(btnNext);
                    }
                }
            });
        });
    </script>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset("css/Jcrop.min.css") }}"/>
{% endblock %}
