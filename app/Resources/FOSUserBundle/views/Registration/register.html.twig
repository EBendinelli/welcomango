{% extends '::front.html.twig' %}

{% block body_class 'pace-white' %}

{% form_theme form with ["::frontTheme.html.twig"] %}

{% block fos_user_content %}
    {% include "FOSUserBundle:Registration:register_content.html.twig" %}
{% endblock fos_user_content %}


{% block page_content %}
<!-- BEGIN JUMBOTRON -->
<section class="jumbotron full-height bg-black" data-pages-bg-image="{{ asset('bundles/welcomangocore/images/experience_default/places-0.jpg') }}" data-bg-overlay="black" data-overlay-opacity="0.2" >
    <div class="container-xs-height full-height">
        <div class="col-xs-height col-middle text-left">
            <div class="container m-t-50 m-b-100">
                <!-- BEGIN TEXT PART -->
                <div class="col-md-6 col-md-push-6">
                    <h1 class="light text-white m-b-40">The first step of your next adventure</h1>
                    <h5 class="text-white">Join the Welcomango community to discover a new way of traveling and enhance your life experience. </h5>
                    <br/>
                    <h5 class="text-white">Feel a European city and create boundaries with the locals</h5>
                </div>
                <!-- END TEXT PART -->

                <!-- BEGIN FORM PART -->
                <div class="col-md-5 bg-master-lightest p-t-10 p-l-20 p-r-20 m-l-10  m-r-10  row col-md-pull-6">
                    <h4 class="text-center bold m-b-30">Join Welcomango Now</h4>
                    {{ form_start(form, {'attr': {'id': 'registration_form'}}) }}
                    {{ form_errors(form) }}
                    {{ form_row(form.username) }}
                    <div id="fos_user_registration_form_username_message"></div>
                    {{ form_row(form.email) }}
                    <div id="fos_user_registration_form_email_message"></div>
                    <div class="row">
                        <div class="col-md-6">{{ form_row(form.firstName) }}</div>
                        <div class="col-md-6">{{ form_row(form.lastName) }}</div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">{{ form_row(form.plain_password.first) }}</div>
                        <div class="col-md-6">{{ form_row(form.plain_password.second) }}</div>
                    </div>
                    <div class="row">
                        <div class="col-md-7 m-b-10">{{ form_row(form.birthdate) }}</div>
                        <div class="col-md-5">{{ form_row(form.gender) }}</div>

                    </div>
                    <div class="row">
                    </div>
                    <div class="row">
                        <div class="col-md-12">{{ form_row(form.fromCityInput, {'attr': {'onFocus':'geolocate()'}}) }}</div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">{{ form_row(form.currentCityInput, {'attr': {'onFocus':'geolocate()'}}) }}</div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">{{ form_row(form.occupation) }}</div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">{{ form_row(form.captcha) }}</div>
                    </div>
                    <div class="row">
                        <div class="col-md-12 text-right">{{ form_row(form.register, {'attr': {'class': 'btn-primary'}} ) }}</div>
                    </div>
                    {{ form_end(form) }}
                </div>
                <!-- END FORM PART -->
            </div>
        </div>
    </div>
</section>
<!-- END JUMBOTRON -->
{% endblock page_content %}

{% block javascripts %}
    {{ parent() }}

    <script type="text/javascript">

        var placeSearch, autocompleteFrom;
        var placeSearch, autocompleteCurrent;

        function initAutocomplete() {
            // Create the autocomplete object, restricting the search to geographical
            // location types.
            var input = document.getElementById('fos_user_registration_form_fromCityInput');
            autocompleteFrom = new google.maps.places.Autocomplete(input , {types: ['(cities)'], region:'EU'});

            var input = document.getElementById('fos_user_registration_form_currentCityInput');
            autocompleteCurrent = new google.maps.places.Autocomplete(input , {types: ['(cities)'], region:'EU'});

            // When the user selects an address from the dropdown, populate the address
            // fields in the form.
            autocompleteFrom.addListener('place_changed', function(){
                var placeFrom = autocompleteFrom.getPlace();

                if(placeFrom){
                    var fromCity = document.getElementById('fos_user_registration_form_fromCity');
                    var fromCityLat = document.getElementById('fos_user_registration_form_fromCityLat');
                    var fromCityLng = document.getElementById('fos_user_registration_form_fromCityLng');
                    var fromCityState = document.getElementById('fos_user_registration_form_fromCityState');
                    var fromCityCountry = document.getElementById('fos_user_registration_form_fromCityCountry');
                    var fromCityCountryCode = document.getElementById('fos_user_registration_form_fromCityCountryCode');
                    for (var i = 0; i < placeFrom.address_components.length; i++) {
                        var addressType = placeFrom.address_components[i].types[0];
                        if (addressType == 'country') {
                            fromCityCountry.value = placeFrom.address_components[i]['long_name'];
                            fromCityCountryCode.value = placeFrom.address_components[i]['short_name'];
                        }else if(addressType == 'administrative_area_level_1') {
                            fromCityState.value = placeFrom.address_components[i]['long_name'];
                        }else if(addressType == 'locality') {
                            fromCity.value = placeFrom.address_components[i]['long_name'];
                        }
                    }

                    fromCityLat.value = placeFrom.geometry.location.lat();
                    fromCityLng.value = placeFrom.geometry.location.lng();
                }
            });

            autocompleteCurrent.addListener('place_changed', function(){
                var placeCurrent = autocompleteCurrent.getPlace();

                if(placeCurrent){
                    var currentCity = document.getElementById('fos_user_registration_form_currentCity');
                    var currentCityLat = document.getElementById('fos_user_registration_form_currentCityLat');
                    var currentCityLng = document.getElementById('fos_user_registration_form_currentCityLng');
                    var currentCityState = document.getElementById('fos_user_registration_form_currentCityState');
                    var currentCityCountry = document.getElementById('fos_user_registration_form_currentCityCountry');
                    var currentCityCountryCode = document.getElementById('fos_user_registration_form_currentCityCountryCode');

                    for (var i = 0; i < placeCurrent.address_components.length; i++) {
                        var addressType = placeCurrent.address_components[i].types[0];
                        if (addressType == 'country') {
                            currentCityCountry.value = placeCurrent.address_components[i]['long_name'];
                            currentCityCountryCode.value = placeCurrent.address_components[i]['short_name'];
                        }else if(addressType == 'administrative_area_level_1') {
                            currentCityState.value = placeCurrent.address_components[i]['long_name'];
                        }else if(addressType == 'locality') {
                            currentCity.value = placeCurrent.address_components[i]['long_name'];
                        }
                    }
                    currentCityLat.value = placeCurrent.geometry.location.lat();
                    currentCityLng.value = placeCurrent.geometry.location.lng();
                }
            });
        }

        // Bias the autocomplete object to the user's geographical location,
        // as supplied by the browser's 'navigator.geolocation' object.
        function geolocate() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function(position) {
                    var geolocation = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                });
            }
        }

    </script>

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAt6eHUKQPmViopocNUR0iShUiKK72dj7g&&signed_in=true&libraries=places&callback=initAutocomplete" async defer></script>

    <script>
        var timeout;
        $(document).ready(function () {
            $('#fos_user_registration_form_username').val('');
            var elements = ['fos_user_registration_form_username', 'fos_user_registration_form_email'];

            $('.form-control').keyup(function (event) {
                if($.inArray($(this).attr('id'), elements) > -1){

                    var query = $(this).val();
                    var field = $(this).attr('id');
                    var element = $(this)
                    var elementId = element.attr('id');

                    clearTimeout(timeout);

                    if (query.length > 3) {
                        /*$('#spinner').css('display', 'inline');*/
                        $.post("{{ path('user_registration_check_ajax') }}", {'query': query, 'field': field}, function (response) {
                            var parsedResponse = $.parseJSON(response);
                            $('#spinner').css('display', 'none');
                            $('#'+elementId+'_message').html(parsedResponse['message']);
                            $('#'+elementId+'_message').removeAttr('class');
                            $('#'+elementId+'_message').addClass(parsedResponse['class'])
                        }, 'html');
                    }
                }
            });
        });
    </script>
{% endblock javascripts %}
