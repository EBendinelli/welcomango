{% block text_widget %}
    <div class="form-group form-group-default {% if required %}required{% endif %}">
        <label>{{ form_label(form) }}</label>
        <input class="form-control" {{ block('widget_attributes') }} {% if value is not empty %}value="{{ value }}" {% endif %}/>
    </div>
{% endblock text_widget %}

{% block yes_no_widget %}
    {% spaceless %}
        <div class="form-group {% if required %}required{% endif %}">
            <label>{{ form_label(form) }}</label>
            <div class="radio radio-success">
                {% set isChecked = false %}
                {% for key, child in form.children %}
                    {% if child.vars.checked == true %}
                        {% set isChecked = true %}
                    {% endif %}
                    <input type="radio" value="{{ child.vars.value }}"
                           {% if child.vars.checked == true or (child.vars.value == 2 and isChecked == false) %}checked="checked" {% endif %} name="{{ form.vars.full_name }}"
                           id="{{ form.vars.id }}_{{ key }}">
                    <label for="{{ form.vars.id }}_{{ key }}">{{ child.vars.label }}</label>
                {% endfor %}
            </div>
        </div>
    {% endspaceless %}
{% endblock %}

{% block mark_widget %}
    <div class="form-group form-group-default {% if required %}required{% endif %}">
        <label>{{ form_label(form) }}</label>
        <input style="display: none;" class="form-control" {{ block('widget_attributes') }} {% if value is not empty %}value="{{ value }}" {% endif %}/>

        <div class="container-mark">
            {% for i in form.vars.attr.min..form.vars.attr.max %}
                <i id="{{ form.vars.attr.class }}-{{ i }}" data-mark="{{ i }}" class="{{ form.vars.attr.class }} fa {{ form.vars.attr.unselected }}"></i>
            {% endfor %}
        </div>
    </div>
    <script type="text/javascript">
        var currentMark = 0;
        $(".{{ form.vars.attr.class }}").mouseover(function () {
            var pos = $(this).data('mark');
            for (i = 1; i <= pos; i++) {
                $('#{{ form.vars.attr.class }}-' + i).removeClass('{{ form.vars.attr.unselected }}');
                $('#{{ form.vars.attr.class }}-' + i).addClass('{{ form.vars.attr.selected }}');
            }
        });

        $(".star").click(function () {
            var mark = $(this).data('mark');
            currentMark = mark;
            $('#{{ form.vars.id }}').val(mark);
            for (i = {{ form.vars.attr.min }}; i <= {{ form.vars.attr.max }}; i++) {
                if (i <= currentMark) {
                    $('#{{ form.vars.attr.class }}-' + i).removeClass('{{ form.vars.attr.unselected }}');
                    $('#{{ form.vars.attr.class }}-' + i).addClass('{{ form.vars.attr.selected }}');
                } else {
                    $('#{{ form.vars.attr.class }}-' + i).addClass('{{ form.vars.attr.unselected }}');
                    $('#{{ form.vars.attr.class }}-' + i).removeClass('{{ form.vars.attr.selected }}');
                }
            }
            updateMark(currentMark)
        });

        $(".container-mark").mouseout(function () {
            $('.{{ form.vars.attr.class }}').removeClass('{{ form.vars.attr.selected }}');
            $('.{{ form.vars.attr.class }}').addClass('{{ form.vars.attr.unselected }}');
            for (i = {{ form.vars.attr.min }}; i <= currentMark; i++) {
                $('#{{ form.vars.attr.class }}-' + i).removeClass('{{ form.vars.attr.unselected }}');
                $('#{{ form.vars.attr.class }}-' + i).addClass('{{ form.vars.attr.selected }}');
            }
        });

        function updateMark(currentMark) {
            for (i = {{ form.vars.attr.min }}; i <= {{ form.vars.attr.max }}; i++) {
                if (i <= currentMark) {
                    $('#{{ form.vars.attr.class }}-' + i).removeClass('{{ form.vars.attr.unselected }}');
                    $('#{{ form.vars.attr.class }}-' + i).addClass('{{ form.vars.attr.selected }}');
                } else {
                    $('#{{ form.vars.attr.class }}-' + i).addClass('{{ form.vars.attr.unselected }}');
                    $('#{{ form.vars.attr.class }}-' + i).removeClass('{{ form.vars.attr.selected }}');
                }
            }
        }
    </script>

{% endblock mark_widget %}

{% block textarea_widget %}
    {% spaceless %}
        <div class="form-group form-group-default {% if required %}required{% endif %}">
            <label>{{ form_label(form) }}</label>
            {# !!!IMPORTANT!!!  #}
            {# must remove the style tag and place it somewhere appropriate #}
            <textarea class="form-control" {{ block('widget_attributes') }} style="height:200px">{% if value is not empty %}{{ value }} {% endif %}</textarea>
        </div>
    {% endspaceless %}
{% endblock textarea_widget %}

{% block select_widget %}
    <div class="form-group form-group-default form-group-default-select  {% if required %}required{% endif %}">
        <label>{{ form_label(form) }}</label>
        <select class="form-control" {{ block('widget_attributes') }} {% if value is not empty %}value="{{ value }}" {% endif %} >
        </select>
    </div>
{% endblock select_widget %}

{% block password_widget %}
    <div class="form-group form-group-default {% if required %}required{% endif %}">
        <label>{{ form_label(form) }}</label>
        <input type="password" class="form-control" {{ block('widget_attributes') }} {% if value is not empty %}value="{{ value }}" {% endif %}/>
    </div>
{% endblock password_widget %}

{% block choice_widget %}
    <div class="form-group form-group-default form-group-default-select2">
        {{ form_label(form) }}
        <select class="full-width select2-offscreen" data-init-plugin="select2" {{ block('widget_attributes') }}{% if multiple %} multiple="multiple"{% endif %}>
            {%- if placeholder is not none -%}
                <option value=""{% if required and value is empty %} selected="selected"{% endif %}>{{ placeholder != '' ? placeholder|trans({}, translation_domain) }}</option>
            {%- endif -%}
            {%- if preferred_choices|length > 0 -%}
                {% set options = preferred_choices %}
                {{- block('choice_widget_options') -}}
                {%- if choices|length > 0 and separator is not none -%}
                    <option disabled="disabled">{{ separator }}</option>
                {%- endif -%}
            {%- endif -%}
            {%- set options = choices -%}
            {{- block('choice_widget_options') -}}
        </select>
    </div>
{% endblock choice_widget %}


{% block file_widget %}
    {% spaceless %}
        <div class="dropzone">
            <div class="fallback">{% set type = type|default('file') %}
                <input type="{{ type }}" {{ block('widget_attributes') }}/>
            </div>
        </div>
    {% endspaceless %}
{% endblock %}


{%- block form_row -%}
    <div>
        {{- form_errors(form) -}}
        {{- form_widget(form) -}}
    </div>
{%- endblock form_row -%}

{% block form_label %}
    {% if not compound %}
    {% set label_attr = label_attr|merge({'for': id}) %}
{% endif %}
    {% if required %}
    {% set label_attr = label_attr|merge({'class': (label_attr.class|default('') ~ ' required')|trim}) %}
{% endif %}
    {% if label is empty %}
    {% set label = name|humanize %}
{% endif %}
    <label{% for attrname, attrvalue in label_attr %} {{ attrname }}="{{ attrvalue }}"{% endfor %}>{{ label|trans({}, translation_domain) }}</label>
{% endblock form_label %}

{% block genemu_jqueryselect2_hidden_javascript %}
    <script type="text/javascript">
        $(document).ready(function() {
            $field = $('#{{ id }}');

            $configs = $.extend({}, {
                ajax: {
                    quietMillis: 100,
                    url: "{{ path('admin_user_search_ajax') }}",
                    type: 'POST',
                    data: function (term) {
                        return {
                            query: term,
                        };
                    },
                    results: function (data) {
                        console.log(data);
                        return { results: data };
                    }
                },
                initSelection : function (element, callback) {
                    if ($(element).val() != '') {
                        var params = $(element).val().split(";");
                        callback({id: params[0], text: params[1]});
                        $(element).val(params[0]);
                    }
                }
            });
            $field.select2($configs);
        });
    </script>
{% endblock %}

{% block genemu_jqueryimage_javascript %}
    {% spaceless %}
        <script type="text/javascript">
            jQuery(document).ready(function($) {
                var $field   = $('#{{ id }}_upload');
                {% block genemu_jqueryimage_javascript_prototype %}
                var $form    = $field.closest('form');
                var $preview = $('#{{ id }}_img_preview');
                var $options = $('#{{ id }}_options');
                // Base path for apps not on DocumentRoot
                var $basePath = '{{ asset(configs.folder) }}';
                $basePath = $basePath.substr(0, $basePath.length - '{{ configs.folder }}'.length);

                var $coords = {};
                var $crop = null;
                var $ratio = 1;

                var $configs = $.extend({{ configs|merge({
            'swf':       asset(configs.swf),
            'cancelImg': asset(configs.cancelImg),
            'uploader':  path(configs.script),
            'queueID':   id ~ '_queue'
        })|json_encode|raw }}, {
                    onUploadSuccess: function(file, data, response) {
                        data = jQuery.parseJSON(data);
                        if (data.result == '1') {
                            $('#{{ id }}').val(data.file);

                            // add if and only if path is relative
                            if (data.thumbnail.file.search(/^[/\\]/) < 0) {
                                data.thumbnail.file = $basePath + data.thumbnail.file;
                            }

                            createCrop({
                                image:      data.image,
                                thumbnail:  data.thumbnail
                            });
                        } else {
                            alert('Error');
                        }

                    },
                    onUploadError: function(file, errorCode, errorMsg, errorString) {
                        alert('error');
                    }
                });

                var createCrop = function (data) {
                    if ($crop) {
                        $crop.destroy();
                    }

                    // add if and only if path is relative
                    if (data.thumbnail.file.search(/^[/\\]/) < 0) {
                        data.thumbnail.file = $basePath + data.thumbnail.file;
                    }
                    var $img = new Image();

                    console.log(data);
                    $($img).load(function() {
                        {% set widthMax = data.thumbnail is defined ? data.thumbnail.width : 500 %}

                        $ratio = data.image.width > {{ widthMax }} ? data.image.width / {{ widthMax }} : 1;
                        $('.crop', $options).hide();

                        $preview
                                .width(Math.round(data.image.width / $ratio))
                                .height(Math.round(data.image.height / $ratio))
                                .attr('src', this.src);

                        if (!$crop) {
                            $options.fadeIn();
                        }

                        $preview.Jcrop({
                            onSelect: checkCoords,
                            onChange: checkCoords,
                            aspectRatio: 1
                        }, function() {
                            $crop = this;
                        });
                    }).attr('src', data.thumbnail.file);
                }

                var checkCoords = function(coords) {

                    if (coords.w > 0 && coords.h > 0) {
                        $('.crop', $options).fadeIn();

                        $coords = {
                            x: coords.x * $ratio,
                            y: coords.y * $ratio,
                            w: coords.w * $ratio,
                            h: coords.h * $ratio
                        };
                    } else {
                        $('.crop', $options).fadeOut();
                    }
                }

                $('.change', $options).click(function() {
                    var $this = $(this);
                    var $regex = new RegExp('^\\b(.*?) (.*)\\b', 'g');
                    var $filter = $this.attr('class').replace($regex, '$1');

                    var $data = {
                        filter: $filter,
                        image: $('#{{ id }}').val(),
                        opacity: 0.5
                    };

                    if ('crop' === $filter && !$.isEmptyObject($coords)) {
                        $data = $.extend($data, $coords);
                    }

                    if (
                            $.inArray($filter, {{ filters|json_encode|raw }}) !== -1 ||
                            ( 'crop' === $filter && !$.isEmptyObject($coords) )
                    ) {
                        $this.addClass('loading');

                        $.ajax({
                            type: 'POST',
                            url: '{{ path('genemu_form_image') }}',
                            data: $data,
                            dataType: 'json',
                            success: function(data) {
                                if (data.result == '1') {
                                    $('#{{ id }}').val(data.file);

                                    createCrop({
                                        image: data.image,
                                        thumbnail: $.isEmptyObject(data.thumbnail) ? $.extend(data.image, {
                                            file: data.file
                                        }) : data.thumbnail
                                    });
                                } else {
                                    alert('Error');
                                }

                                $this.removeClass('loading');
                            }
                        });
                    }
                });

                {% if value %}
                createCrop({
                    thumbnail: {
                        file: '{{ thumbnail is defined ? thumbnail.file : value }}',
                        width: {{ thumbnail is defined ? thumbnail.width : width }},
                        height: {{ thumbnail is defined ? thumbnail.height : height }},
                    },
                    image: {
                        width: {{ width }},
                        height: {{ height }}
                    }
                });
                {% else %}
                $options.hide();
                {% endif %}

                $field.uploadify($configs);
                {% endblock %}
            });
        </script>
    {% endspaceless %}
{% endblock %}
